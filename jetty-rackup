#!/usr/bin/env jruby
# -*- ruby -*-

require 'java'
require 'rubygems'
require 'rack'

Dir[File.join(File.dirname(__FILE__), 'jars', '*.jar')].each { |jar| require jar }

include_class 'javax.servlet.http.HttpServlet'
include_class 'org.mortbay.jetty.Server'
include_class 'org.mortbay.jetty.servlet.Context'
include_class 'org.mortbay.jetty.servlet.ServletHolder'
include_class 'org.jruby.rack.servlet.ServletRackContext'
include_class 'org.mortbay.jetty.handler.ResourceHandler'
include_class 'org.mortbay.jetty.handler.DefaultHandler'
include_class 'org.mortbay.jetty.handler.HandlerList'
include_class 'org.mortbay.jetty.handler.ResourceHandler'
include_class 'org.mortbay.jetty.handler.ContextHandlerCollection'
include_class 'org.mortbay.jetty.servlet.DefaultServlet'

config = ARGV[0] || "config.ru"
if !File.exist? config
  abort "configuration #{config} not found"
end

server = org.mortbay.jetty.Server.new 4566

context = org.mortbay.jetty.servlet.Context.new(nil, "/", org.mortbay.jetty.servlet.Context::NO_SESSIONS)
context.add_filter("org.jruby.rack.RackFilter", "/*", org.mortbay.jetty.Handler::DEFAULT)
context.set_resource_base(File.dirname(__FILE__))
context.add_event_listener(org.jruby.rack.RackServletContextListener.new)

rackup = File.read(config)

context.set_init_params(java.util.HashMap.new(
  'org.mortbay.jetty.servlet.Default.relativeResourceBase' => '/public',
  'rackup' => rackup,
  'jruby.max.runtimes' => '1'))
context.add_servlet(org.mortbay.jetty.servlet.ServletHolder.new(
  org.mortbay.jetty.servlet.DefaultServlet.new), "/")

server.set_handler(context)
server.start

